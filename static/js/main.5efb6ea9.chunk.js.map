{"version":3,"sources":["../../resume/src/components/IconTitle.tsx","../../resume/src/components/ContactItem.tsx","../../resume/src/components/ProfilePicture.tsx","../../resume/src/components/PersonalSection.tsx","../../resume/src/components/Division.tsx","../../resume/src/components/Section.tsx","../../resume/src/components/DetailsSection.tsx","../../resume/src/App.tsx","../../resume/src/serviceWorker.ts","../../resume/src/index.tsx"],"names":["IconTitle","_ref","text","react_default","a","createElement","className","toUpperCase","ContactItem","href","label","value","ProfilePicture","imgUrl","src","PersonalSection","imageUrl","fullName","title","about","hobbies","contactItems","components_ProfilePicture","components_IconTitle","map","ci","components_ContactItem","key","Division","props","startYear","endYear","position","company","children","Section","concat","extraClassName","JobDescription","jobDescription","Array","isArray","line","i","DetailsSection","_ref2","_ref2$detailsData","detailsData","experiences","skills","certificates","components_Section","exp","components_Division","Object","assign","DetailsSection_JobDescription","s","cert","App","objectDestructuringEmpty","components_PersonalSection","cv_content","components_DetailsSection","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5efb6ea9.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\n\ninterface OwnProps {\n\ttext: string;\n}\n\nconst IconTitle: FunctionComponent<OwnProps> = ({ text }) => {\n\treturn (\n\t\t<div className={'section-main'}>\n\t\t\t<div className={'frame frame--small'}>\n\t\t\t\t<span>{text[0].toUpperCase()}</span>\n\t\t\t</div>\n\t\t\t<h3 className={'section-header'}>{text}</h3>\n\t\t</div>\n\t);\n};\n\nexport default IconTitle;\n","import React, { FunctionComponent } from 'react';\n\ninterface OwnProps {\n\tlabel: string;\n\tvalue: string;\n\thref?: string;\n}\n\nconst ContactItem: FunctionComponent<OwnProps> = ({ href, label, value }) => {\n\treturn (\n\t\t<div className={'contact-item'}>\n\t\t\t<span>{label}</span>\n\t\t\t{href ? <a href={href}>{value}</a> : <span>{value}</span>}\n\t\t</div>\n\t);\n};\n\nexport default ContactItem;\n","import React, { FunctionComponent } from 'react';\n\ninterface OwnProps {\n\timgUrl: string;\n}\n\nconst ProfilePicture: FunctionComponent<OwnProps> = ({ imgUrl }) => {\n\treturn (\n\t\t<div className={'info-picture'}>\n\t\t\t<div className={'frame'}>\n\t\t\t\t<div className={'photo-wrapper'}>\n\t\t\t\t\t<img className=\"photo\" src={imgUrl} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ProfilePicture;\n","import React, { FunctionComponent } from 'react';\nimport IconTitle from './IconTitle';\nimport ContactItem from './ContactItem';\nimport ProfilePicture from './ProfilePicture';\nimport { CvData } from '../models/CvData';\n\nconst PersonalSection: FunctionComponent<CvData> = ({\n\timageUrl,\n\tfullName,\n\ttitle,\n\tabout,\n\thobbies,\n\tcontactItems,\n}) => (\n\t<div className={'info'}>\n\t\t<ProfilePicture imgUrl={imageUrl} />\n\t\t<h1 className={'name'}>{fullName}</h1>\n\t\t<h2 className={'title'}>{title}</h2>\n\t\t<div className={'about'}>\n\t\t\t<IconTitle text=\"About Me\" />\n\t\t\t<p>{about}</p>\n\t\t\t<p>{hobbies}</p>\n\t\t</div>\n\t\t<div className={'contact'}>\n\t\t\t<IconTitle text=\"Contact\" />\n\t\t\t{contactItems.map(ci => (\n\t\t\t\t<ContactItem\n\t\t\t\t\tkey={ci.label}\n\t\t\t\t\tlabel={ci.label}\n\t\t\t\t\tvalue={ci.value}\n\t\t\t\t\thref={ci.href}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t</div>\n);\n\nexport default PersonalSection;\n","import React, { FunctionComponent } from 'react';\n\ninterface OwnProps {\n\tstartYear: string;\n\tendYear?: string;\n\tposition: string;\n\tcompany: string;\n}\n\nconst Division: FunctionComponent<OwnProps> = props => {\n\treturn (\n\t\t<div className={'division'}>\n\t\t\t<div className={'division-header'}>\n\t\t\t\t<div className={'division-main-date'}>\n\t\t\t\t\t{props.startYear} - {props.endYear}\n\t\t\t\t</div>\n\t\t\t\t<div className={'division-main-position'}>\n\t\t\t\t\t<span>{props.position}</span>\n\t\t\t\t\t<span>{props.company}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{props.children}\n\t\t\t<p className={'division-content'} />\n\t\t</div>\n\t);\n};\n\nexport default Division;\n","import React, { FunctionComponent } from 'react';\nimport IconTitle from './IconTitle';\n\ninterface OwnProps {\n\ttitle: string;\n\textraClassName?: string;\n}\n\nconst Section: FunctionComponent<OwnProps> = props => {\n\treturn (\n\t\t<div className={`section ${props.extraClassName}`}>\n\t\t\t<IconTitle text={props.title} />\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Section;\n","import React, { FunctionComponent } from 'react';\nimport Division from './Division';\nimport Section from './Section';\nimport { CvData } from '../models/CvData';\n\ninterface OwnProps {\n\tdetailsData: CvData;\n}\n\nconst JobDescription = ({\n\tjobDescription,\n}: {\n\tjobDescription: string[] | string;\n}) =>\n\tArray.isArray(jobDescription) ? (\n\t\t<ul>\n\t\t\t{jobDescription.map((line, i) => (\n\t\t\t\t<li key={i}>{line}</li>\n\t\t\t))}\n\t\t</ul>\n\t) : (\n\t\t<p>{jobDescription}</p>\n\t);\n\nconst DetailsSection: FunctionComponent<OwnProps> = ({\n\tdetailsData: { experiences, skills, certificates },\n}) => (\n\t<div className={'details'}>\n\t\t<Section title=\"Experiences\">\n\t\t\t{experiences.map((exp, i) => (\n\t\t\t\t<Division key={i} {...exp}>\n\t\t\t\t\t<JobDescription jobDescription={exp.jobDescription} />\n\t\t\t\t</Division>\n\t\t\t))}\n\t\t</Section>\n\t\t<Section title=\"Workskills\" extraClassName=\"work-skills\">\n\t\t\t<ul>\n\t\t\t\t{skills.map((s, i) => (\n\t\t\t\t\t<li key={i}>{s}</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</Section>\n\t\t<Section title=\"Certificates\">\n\t\t\t{certificates.map((cert, i) => (\n\t\t\t\t<Division key={i} {...cert} />\n\t\t\t))}\n\t\t</Section>\n\t</div>\n);\n\nexport default DetailsSection;\n","import React, { FunctionComponent } from 'react';\nimport PersonalSection from './components/PersonalSection';\nimport DetailsSection from './components/DetailsSection';\nimport './App.css';\nimport cv_content from './cv-content.json';\nimport { CvData } from './models/CvData';\n\nconst App: FunctionComponent = ({}) => (\n\t<div className={'container'}>\n\t\t<PersonalSection {...cv_content as CvData} />\n\t\t<DetailsSection detailsData={cv_content as CvData} />\n\t</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}